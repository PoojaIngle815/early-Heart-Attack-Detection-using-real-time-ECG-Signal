import pandas as pd
from sklearn.utils import resample
from keras.models import Sequential
from keras.layers import Dense
import matplotlib.pyplot as plt
import numpy as np

# Load the dataset
test = pd.read_csv(r"C:\Users\Pooja\Downloads\archive (3)\mitbih_test.csv", header=None)
train = pd.read_csv(r"C:\Users\Pooja\Downloads\archive (3)\mitbih_train.csv", header=None)

# Resampling the dataset to balance classes
df_1 = train[train[187] == 1]
df_2 = train[train[187] == 2]
df_3 = train[train[187] == 3]
df_4 = train[train[187] == 4]

df_1_upsample = resample(df_1, n_samples=20000, replace=True, random_state=123)
df_2_upsample = resample(df_2, n_samples=20000, replace=True, random_state=123)
df_3_upsample = resample(df_3, n_samples=20000, replace=True, random_state=123)
df_4_upsample = resample(df_4, n_samples=20000, replace=True, random_state=123)
df_0 = train[train[187] == 0].sample(n=20000, random_state=123)

train_df = pd.concat([df_0, df_1_upsample, df_2_upsample, df_3_upsample, df_4_upsample])

# Convert labels to binary: 0 for normal, 1 for abnormal
train_df[187] = train_df[187].apply(lambda x: 0 if x == 0 else 1)
test[187] = test[187].apply(lambda x: 0 if x == 0 else 1)

# Prepare the data for training
trainX = train_df.iloc[:, :-1]
trainY = train_df.iloc[:, -1]
testX = test.iloc[:, :-1]
testY = test.iloc[:, -1]

# Define the model
model = Sequential()
model.add(Dense(187, activation='relu', input_shape=(187,)))
model.add(Dense(100, activation='relu'))
model.add(Dense(1, activation='sigmoid'))  # Binary classification: 0 (normal) or 1 (abnormal)

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
his = model.fit(trainX, trainY, batch_size=128, validation_data=(testX, testY), epochs=100, verbose=True)

# Evaluate the model
loss, acc = model.evaluate(testX, testY)
print('Evaluation:')
print(f'Loss: {loss}, Accuracy: {acc}')

# Plot accuracy and loss
fig, ax = plt.subplots(1, 2, figsize=(10, 3))
for i, met in enumerate(['accuracy', 'loss']):
    ax[i].plot(his.history[met])
    ax[i].plot(his.history['val_' + met])
    ax[i].set_title(f'Model {met}')
    ax[i].set_xlabel('Epochs')
    ax[i].set_ylabel(met)
    ax[i].legend(['train', 'val'])
plt.show()

# Predict the class of the test data
predictions = model.predict(testX)
predicted_classes = (predictions > 0.5).astype("int32")

# Visualize some predictions
for i in range(5):  # Display 5 random predictions
    index = np.random.randint(0, len(testX))
    ecg_signal = testX.iloc[index].values
    predicted_label = predicted_classes[index][0]
    true_label = testY.iloc[index]
    
    true_label_str = "No Heart Attack" if true_label == 0 else "Early Heart Attack"
    predicted_label_str = "No Heart Attack" if predicted_label == 0 else "Early Heart Attack"
    
    plt.figure(figsize=(10, 4))
    plt.plot(ecg_signal, color='blue', label='ECG Signal')
    plt.title(f"ECG Signal\nTrue Label: {true_label_str}, Predicted Label: {predicted_label_str}")
    plt.xlabel("Time")
    plt.ylabel("Amplitude")
    plt.legend()
    plt.show()
